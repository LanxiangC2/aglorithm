/**
 * leetcode 89 格雷编码
 * n 位格雷码序列 是一个由 2n方 个整数组成的序列，其中：
每个整数都在范围 [0, 2n方 - 1] 内（含 0 和 2n方 - 1）
第一个整数是 0
一个整数在序列中出现 不超过一次
每对 相邻 整数的二进制表示 恰好一位不同 ，且
第一个 和 最后一个 整数的二进制表示 恰好一位不同
给你一个整数 n ，返回任一有效的 n 位格雷码序列 。

示例 1：

输入：n = 2
输出：[0,1,3,2]
解释：
[0,1,3,2] 的二进制表示是 [00,01,11,10] 。
- 00 和 01 有一位不同
- 01 和 11 有一位不同
- 11 和 10 有一位不同
- 10 和 00 有一位不同
[0,2,3,1] 也是一个有效的格雷码序列，其二进制表示是 [00,10,11,01] 。
- 00 和 10 有一位不同
- 10 和 11 有一位不同
- 11 和 01 有一位不同
- 01 和 00 有一位不同
示例 2：

输入：n = 1
输出：[0,1]

 */

function grayCode(n: number): number[] {

// 代码细节解释
// 初始化部分：
// let res = [0];：创建一个数组res，并将初始值0放入其中，这是格雷编码序列的起始值。
// let head = 1;：初始化变量head为1，它在后续构建新的格雷编码值时起到关键作用，每次外层循环迭代时，它会通过左移操作（<<）来改变其值，以适配不同位数下的编码生成。

// 循环构建部分：
// 外层循环 for (let i = 0; i < n; i++)：这个循环控制生成格雷编码的位数，循环n次，每一次循环都会增加格雷编码的位数，也就是逐步构建出完整的n位格雷编码序列。
// 内层循环 for (let j = res.length - 1; j >= 0; j--)：这个循环是根据当前已有的格雷编码结果数组res来生成新的编码值。它从res数组的最后一个元素开始，倒序遍历每个元素，然后将当前的head值与res中的元素相加，并将结果添加到res数组中，这样就利用了格雷编码的特性（通过镜像反射的方式来生成下一组编码），不断扩充res数组，使其包含更多的格雷编码值。
// head <<= 1;：这是在每次外层循环结束后，对head变量进行左移一位的操作，在 JavaScript 中，左移操作符<<可以快速地将一个数字乘以2的对应幂次方（左移几位就相当于乘以2的几次方），这里用于改变head的值，以适应下一轮构建新的格雷编码值时的计算需求。

// 返回结果部分：
// return res;：最后，将完整构建好的包含n位格雷编码值的res数组返回，作为函数的最终输出结果。
        const res = [0]
        let head = 1
        for (let i = 0; i < n; i++) {
    
            for (let j = res.length -1 ; j >=0 ; j--) {
                console.log('head + res[j]', head + res[j])
                res.push(head + res[j])
            }
            head <<= 1
    
            console.log(res);
        }
    
        return res
};

export { grayCode }